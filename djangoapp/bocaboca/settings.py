"""
Django settings for bocaboca project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
DATA_DIR = BASE_DIR.parent / 'data' / 'web'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "#p43_gql#v9bnqldt8*nwh7-=vb_$brkzh($4jz#w$ko^l52-#"

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True


ALLOWED_HOSTS = ['https://www.bobaboca.com.br','bobaboca.onrender.com','127.0.0.1','localhost', ".onrender.com",]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bocabocaApp',
    'bocaboca_setup',
    'bocaboca_profile',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bocaboca.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'bocaboca_setup.context_processors.bocaboca_setup',
            ],
        },
    },
]

WSGI_APPLICATION = 'bocaboca.wsgi.application'

BASE_DIR = Path(__file__).resolve().parent.parent

# (Opcional) evita crash se dj_database_url não estiver instalado no local
try:
    import dj_database_url
except ImportError:
    dj_database_url = None

# Ajuda: defina DEBUG="true" no .env/local se quiser
DEBUG = os.getenv("DEBUG", "false").lower() == "true"

# 1) Preferir DATABASE_URL se existir (Render/Heroku/etc.)
DATABASE_URL = os.getenv("DATABASE_URL", "").strip()

# 2) Suporte a POSTGRES_* (docker-compose)
POSTGRES_VARS_PRESENT = all(
    os.getenv(k) for k in ("POSTGRES_DB", "POSTGRES_USER", "POSTGRES_PASSWORD", "POSTGRES_HOST", "POSTGRES_PORT")
)

# Decide a fonte
if DATABASE_URL and dj_database_url:
    # Render geralmente exige SSL. Se seu provedor não exigir, troque ssl_require=False
    # Truque: desativa SSL quando estiver em DEBUG, para funcionar no local com DATABASE_URL.
    DATABASES = {
        "default": dj_database_url.config(
            default=DATABASE_URL,
            conn_max_age=int(os.getenv("CONN_MAX_AGE", "600")),
            ssl_require=not DEBUG,
        )
    }

elif POSTGRES_VARS_PRESENT:
    # Docker local com PostgreSQL via variáveis separadas
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("POSTGRES_DB"),
            "USER": os.getenv("POSTGRES_USER"),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
            "HOST": os.getenv("POSTGRES_HOST"),
            "PORT": os.getenv("POSTGRES_PORT", "5432"),
            "CONN_MAX_AGE": int(os.getenv("CONN_MAX_AGE", "600")),
            # SSL local normalmente não precisa
            "OPTIONS": {},
        }
    }

else:
    # 3) Fallback dev: SQLite no arquivo
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": str(BASE_DIR / "db.sqlite3"),
        }
    }
#DATABASES = {
#    'default': {
#        'ENGINE': os.getenv('DB_ENGINE'),
#        'NAME': os.getenv('POSTGRES_DB'),
#        'USER': os.getenv('POSTGRES_USER'),
#        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
#        'HOST': os.getenv('POSTGRES_HOST'),
#        'PORT': os.getenv('POSTGRES_PORT'),
#    }
#}

LOGOUT_REDIRECT_URL = '/'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'America/Sao_Paulo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = DATA_DIR / 'static'

MEDIA_URL = '/media/'
MEDIA_ROOT = DATA_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'gouberg@gmail.com'
EMAIL_HOST_PASSWORD = 'mkfo pqfy reej jfyu'
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
